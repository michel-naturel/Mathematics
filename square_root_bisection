# It's a function in Python, created during a course by freeCodeCamp. The function uses the bisection method to find a square root of a number (called the square target).

def square_root_bisection(square_target, tolerance=1e-7, max_iterations=100):
# Checking if the square target is either negative or 1 or 0.
    if square_target < 0:
        raise ValueError('Square root of negative number is not defined in real numbers')
    if square_target == 1:
        root = 1
        print(f'The square root of {square_target} is 1')
    elif square_target == 0:
        root = 0
        print(f'The square root of {square_target} is 0')

# If it's none of the above, it starts calculating it.
    else:
        low = 0
        high = max(1, square_target)
        root = None

# Function can take a maximal number of iterations, if not given it takes 100 iterations.
# Each time it finds a number in the middle between "low" and "high". Then it calculates the square of the middle number.
        for _ in range(max_iterations):
            mid = (low + high) / 2
            square_mid = mid**2


            if abs(square_mid - square_target) < tolerance:
                root = mid
                break

            elif square_mid < square_target:
                low = mid
            else:
                high = mid

        if root is None:
            print(f"Failed to converge within {max_iterations} iterations.")
    
        else:   
            print(f'The square root of {square_target} is approximately {root}')
    
    return root
